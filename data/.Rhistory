head(sleep_noNA)
awake <- sleep
data(sleep)
awake$Body_Brain <- awake$BodyWgt/awake$BrainWgt
awake$Dream_Body <- awake$Dream/awake$BodyWgt
sleep_merge <- merge(sleep, awake, by=c("Dream", "BodyWgt"))
awake
dim(awake)
awake <- awake[-seq(1, 50, 7), ]
dim(awake)
dim(sleep_merge)
sleep_merge <- merge(sleep, awake, by=c("Dream", "BodyWgt"))
sleep_merge <- merge(sleep, awake, by=c("Dream", "BodyWgt"), all=TRUE)
dim(sleep_merge)
install.packages("dplry")
install.packages(c("dplyr", "tidyr"))
set.seed(1)
GDP = sample(4000:5000, 50, replace=T), Poverty= sample(1:10, 50, replace=T))
GDP = sample(4000:5000, 50, replace=T), Poverty= sample(1:10, 50, replace=T))
GDP = sample(4000:5000, 50, replace=T), Poverty= sample(1:10, 50, replace=T))
GDP = sample(4000:5000, 50, replace=T), Poverty= sample(1:10, 50, replace=T))
l
set.seed(1)
gdp <- data.frame(Country = sample(c("Canada", "Mexico", "USA"), 50, replace=T),
Region = sample(c("coastal", "inland", "mountain", "riverine"), 50, replace=T),
Year= sample(2011:2015, 50, replace=T),
Pop=sample(1000000:500000, 50, replace=T),
GDP = sample(4000:5000, 50, replace=T),
Poverty= sample(1:10, 50, replace=T))
gdp <- gdp[order(gdp$Country, -gdp$Year),]
country_year <- gdp %.% select(Country, Region, Year)
country_year <- gdp %>% select(Country, Region, Year)
library(dplyr)
country_year <- gdp %>% select(Country, Region, Year)
canada <- gdp %>% filter(Country=="Canada") %>%
select(Region, Year, Pop, GDP, Poverty)
head(Canada)
head(canada)
set.seed(1)
uniform <-
?runif
normal <- rnorm
?rnorm
integer <- sample()
normal <- rnorm #xbar=0, sd=1
integer <- sample()
?sample
character <- sample("Cat", "Dog", "Pig", 20, replace=TRUE) # we can do the same thing with character data
integer <- sample(5:10, 20, replace=TRUE) #20 draws between 5 and 10
character <- sample("Cat", "Dog", "Pig", 20, replace=TRUE) # we can do the same thing with character data
character <- sample(c("Cat", "Dog", "Pig"), 20, replace=TRUE) # we can do the same thing with character data
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
animals <- data.frame(uniform, normal, integer, character, logical)
animals
uniform <- runif(20, 3, 7) #sample 20 draws from the uniform distribution between the numbers 3 and 7
rm(list=ls())
normal <- rnorm #xbar=0, sd=1
integer <- sample(5:10, 20, replace=TRUE) #20 draws between 5 and 10
character <- sample(c("Cat", "Dog", "Pig"), 20, replace=TRUE) # we can do the same thing with character data
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
animals <- data.frame(uniform, normal, integer, character, logical)
animals
animals <- data.frame(uniform, normal, integer, character, logical)
names <-C("Weight", "Progress", "Height", "Name", "Healthy")
animals <- data.frame(uniform, normal, integer, character, logical)
uniform <- runif(20, 3, 7) #sample 20 draws from the uniform distribution between the numbers 3 and 7
normal <- rnorm #xbar=0, sd=1
integer <- sample(5:10, 20, replace=TRUE) #20 draws between 5 and 10
character <- sample(c("Cat", "Dog", "Pig"), 20, replace=TRUE) # we can do the same thing with character data
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
animals <- data.frame(uniform, normal, integer, character, logical)
animals
uniform <-runif(20,3,7)#sample 20 draws form the uniform distribution (graph: horizontal line)
normal= rnorm(20,0,1) #xbar=0, sd=1
integer=sample(5:10,20, replace=TRUE) #20 draws between 5 and 10 (ok to repeat and use numbers again)
character<- sample(c("Cat", "Dog", "Pig", 20, replace=TRUE)) # we can do the same thing with character data
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- as.logical(sample(c("TRUE", "FALSE", as.logical(0), as.logical(1)), 20, replace=TRUE))
logical <- as.logical(sample(c("TRUE", "FALSE",0,1), 20, replace=TRUE))
logical
class(logical)
#How do we turn these vectors into a data frame?
animals <- data.frame(uniform, normal, integer, character, logical)
animals
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
animals <- data.frame(uniform, normal, integer, character, logical, stringsAsFactors = FALSE)
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
#Day 2 Review
# How many different ways can you subset this data frame?
animals
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
#Day 2 Review
# How many different ways can you subset this data frame?
animals <- data.frame(uniform, normal, integer, character, logical, stringsAsFactors = FALSE)
animals
animals <- data.frame(uniform, normal, integer, character, logical, stringsAsFactors=FALSE)
animals
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
#Day 2 Review
# How many different ways can you subset this data frame?
normal= rnorm(20,0,1) #xbar=0, sd=1
integer=sample(5:10,20, replace=TRUE) #20 draws between 5 and 10 (ok to repeat and use numbers again)
?sample
character<- sample(c("Cat", "Dog", "Pig"), 20, replace=TRUE) # we can do the same thing with character data
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- as.logical(sample(c("TRUE", "FALSE", as.logical(0), as.logical(1)), 20, replace=TRUE))
logical <- as.logical(sample(c("TRUE", "FALSE",0,1), 20, replace=TRUE))
logical
class(logical)
#How do we turn these vectors into a data frame?
animals <- data.frame(uniform, normal, integer, character, logical, stringsAsFactors=FALSE)
animals
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
animals$Name
str(animals)
animals$Name <- factor(animals$Name)
str(animals)
animals
animals_sub <- animals
animals_sub <- animals[,c(1,5)]
str(animals_sub)
#What if I just wanted a subsetted data frame with "Name" and "Progress"?
animals_sub2 <- animals[,c(5:17, 20), c(1,5)]
animals_sub2 <- animals[c(5:17, 20), c(1,5)]
str(animals_sub2)
uniform <-runif(20,3,7)#sample 20 draws form the uniform distribution (graph: horizontal line)
?runif
#remember arguments belong in parentheseses
normal= rnorm(20,0,1) #xbar=0, sd=1
integer=sample(5:10,20, replace=TRUE) #20 draws between 5 and 10 (ok to repeat and use numbers again)
?sample
character<- sample(c("Cat", "Dog", "Pig"), 20, replace=TRUE) # we can do the same thing with character data
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- as.logical(sample(c("TRUE", "FALSE", as.logical(0), as.logical(1)), 20, replace=TRUE))
logical <- as.logical(sample(c("TRUE", "FALSE"), 20, replace=TRUE))
logical
class(logical)
#How do we turn these vectors into a data frame?
animals <- data.frame(uniform, normal, integer, character, logical, stringsAsFactors=FALSE)
animals
# What if I just wanted a subsetted data frame with "Name" and "Progress"?
animals_sub <- animals[,c(1,5)]
str(animals_sub)
#What if I just wanted a subsetted data frame with "Name" and "Progress"?
animals_sub2 <- animals[c(5:17, 20), c(1,5)]
str(animals_sub2)
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
animals$Name
#Day 2 Review
# How many different ways can you subset this data frame?
#1 "$" call a single column
animals$Name
#We actually want "Name" to be a factor so we can do comparisons
#To set the "Name" vector as a factor:
str(animals)
animals$Name <- factor(animals$Name)
str(animals)
animals
?summary
summary(animals)
require(pysch)
library(pysch)
install.packages("pysch")
library(pysch)
library(pysch)
install.packages("psych")
library(psych)
?describe
str(animals)
describe(animals[,c(3:5)])
describe(animals[,c(1:3)])
?describeBy
describeBy()
describeBy(animals[,c(1:3)]), animals$Name
describeBy(animals[,c(1:3)], animals$Name
describeBy(animals[,c(1:3)], animals$Name)
describeBy(animals[,c(1:3)], animals$Name)
table(animals$Name)
table(animals$Name)
table(animals$Name, animals$Healthy)
# use hist() to visualize a single variable
hist(animals$Weight, col="violetred")
?png
las=1) #make text parallel to x-axis
las=1) #make text parallel to x-axis
las=1) #make text parallel to x-axis
hist(animals$Weight, col="violetred",
main="Histogram of animal weights", # change title
xlab="Weight(kg)", #change x axis label
las=1) #make text parallel to x-axis
hist(animals$Weight, col="violetred",
main="Histogram of animal weights", # change title
xlab="Weight(kg)", #change x axis label
las=2) #make text parallel to x-axis
# save our histogram as a high-res, publishable quality figure
las=1) #make text parallel to x-axis
las=1) #make text parallel to x-axis
las=2) #make text parallel to x-axis
hist(animals$Weight, col="violetred",
main="Histogram of animal weights", # change title
xlab="Weight(kg)", #change x axis label
las=2) #make text parallel to x-axis
png("cool plot.png", height=6, width=6, units="in", res=300)
dev.off()
get(wd)
png("cool plot.png", height=6, width=6, units="in", res=300)
hist(animals$Weight, col="violetred",
main="Histogram of animal weights", # change title
xlab="Weight(kg)", #change x axis label
las=2) #make text parallel to x-axis
dev.off()
getwd()
data(iris)
?iris
str(iris)
data()
iris
head(iris)
table(species$Name)
table(Species$Name)
table(iris$Name, iris$Species)
table(iris$Species)
hist(iris$Sepal.Length, col=darkgreen",
hist(iris$Sepal.Length, col=darkgreen")
hist(iris$Sepal.Length)
hist(iris$Sepal.Length, col = "light green")
?plot
str(animals)
animals$Weight
animals$Height
plot(animals$Weight, animals$Height)
plot(animals$Weight, animals$Height,
xlab="Weight" (lbs)", # change x label
ylab="Height (meters)", # change y label
)
as.integer(animals$Name)
col=as.integer(animals$Name), #map point colors to cat, dog, pig
cex=4) #change point SIZE
ylim=c(4,11)) #chagne y axis limits
?pch
as.integer(animals$Name)
plot(animals$Weight, animals$Height,
xlab="Weight (lbs)", # change x label
ylab="Height (meters)", # change y label
main="Scatterplot of animal Weight x Height", # change title
las=1, #make axis text more horizontal
col=as.integer(animals$Name), #map point colors to cat, dog, pig
as.integer(animals$Name), #map point SHAPES to cat, dog, pig
cex=1, #change point SIZE
xlim=c(2,8), #change x axis limits
ylim=c(4,11))
plot(animals$Weight, animals$Height,
xlab="Weight (lbs)", # change x label
ylab="Height (meters)", # change y label
main="Scatterplot of animal Weight x Height", # change title
las=1, #make axis text more horizontal
col=as.integer(animals$Name), #map point colors to cat, dog, pig
as.integer(animals$Name), #map point SHAPES to cat, dog, pig
cex=1, #change point SIZE
xlim=c(2,8), #change x axis limits
ylim=c(4,11))
plot(animals$Weight, animals$Height,
xlab="Weight (lbs)", # change x label
ylab="Height (meters)", # change y label
main="Scatterplot of animal Weight x Height", # change title
las=1, #make axis text more horizontal
col=as.integer(animals$Name), #map point colors to cat, dog, pig
pch=as.integer(animals$Name), #map point SHAPES to cat, dog, pig
cex=1, #change point SIZE
xlim=c(2,8), #change x axis limits
ylim=c(4,11))
legend("topright")
horiz=FALSE)
devoff()
horiz=FALSE)
horiz=FALSE)
legend("topright", inset=.0, title="Animal", cex=1,
horiz=FALSE)
pch=as.integer(iris$Species))
iris$Species
col = c(1,2,3)
pch=c(1,2,3)
legend("topleft", inset=.1,
horiz=FALSE)
plot(iris$Petal.Length, iris$Petal.Width,
col=as.integer(iris$Species),
pch=as.integer(iris$Species))
iris$Species
legend("topleft", inset=.1,
c("setosa", "versicolor, virgnica"),
pch=c(1,2,3))
plot(animals$Weight, animals$Height,
xlab="Weight (lbs)", # change x label
ylab="Height (meters)", # change y label
main="Scatterplot of animal Weight x Height", # change title
las=1, #make axis text more horizontal
col=as.integer(animals$Name), #map point colors to cat, dog, pig
pch=as.integer(animals$Name), #map point SHAPES to cat, dog, pig
cex=1, #change point SIZE
xlim=c(2,8), #change x axis limits
ylim=c(4,11)) #chagne y axis limits
# add a legend:
legend("topright", inset=.0, title="Animal", cex=1,
c("Cat", "Dog", "Pig"), col=c(1,2,3), pch=c(1,2,3),
horiz=FALSE)
plot(iris$Petal.Length, iris$Petal.Width,
col=as.integer(iris$Species),
pch=as.integer(iris$Species))
iris$Species
legend("topleft", inset=.1,
c("setosa", "versicolor, virgnica"),
col=c(1,2,3)
pch=c(1,2,3))
legend("topleft", inset=.1,
c("setosa", "versicolor, virgnica"),
col=c(1,2,3)
pch=c(1,2,3))
pch=c(1,2,3))
boxplot(iris$Petal.Width ~ iris$Species, col=c("aquamarine", "goldenrod", "salmon"))
summary(iris)
plot(iris$Petal.Length, iris$Petal.Width,
col=as.integer(iris$Species),
pch=as.integer(iris$Species))
iris$Species
legend("topleft", inset=.1,
c("setosa", "versicolor, virgnica"),
col=c(1,2,3),
pch=c(1,2,3))
boxplot(iris$Petal.Width ~ iris$Species, col=c("aquamarine", "goldenrod", "salmon"))
main="Hooray!")
boxplot(iris$Petal.Width ~ iris$Species, col=c("aquamarine", "goldenrod", "salmon"),
main="Hooray!")
?t.test
t.test(iris$Petal.Length, iris$Petal.Width)
# To compare more than two group means, we use an ANOVA (analysis of variance)
?aov
flower.aov <- aov(Petal.Length ~ Species, data=iris)
flower.aov <- aov(Petal.Length ~ Species, data=iris)
flower.aov
?summary
summary(flower.aov)
?TukeyHSD
TukeyHSD(flower.aov)
?cor.test()
cor.test(animals$Height, animals$Weight)
print("Hello World!")
>print("Hello World!")
# load required packages
library(WDI)
library(dplyr)
library(readr)
library(stringr)
library(readxl)
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2012, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, child_mortal=SH.DYN.MORT, fertil_rate=SP.DYN.TFRT.IN) %>%
filter(income != "Aggregates") %>%
mutate(year = as.integer(year))
# data cleaning
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2012, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, child_mortal=SH.DYN.MORT, fertil_rate=SP.DYN.TFRT.IN,
adol_fertil_rate=SP.MTR.1519.ZS) %>%
filter(income != "Aggregates") %>%
mutate(year = as.integer(year))
indic_list <- c("NY.GDP.PCAP.PP.CD", "SH.DYN.MORT", "SP.DYN.TFRT.IN", "SP.MTR.1519.ZS")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2012, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, child_mortal=SH.DYN.MORT, fertil_rate=SP.DYN.TFRT.IN,
adol_fertil_rate=SP.MTR.1519.ZS) %>%
filter(income != "Aggregates") %>%
mutate(year = as.integer(year))
View(indicators)
setwd("~/Google Drive/maggie-hodges/data")
#install World Bank package
install.packages('WDI')
# load required packages
library(WDI)
library(dplyr)
library(readr)
library(stringr)
library(readxl)
health_service_coverage <- read_csv("health_service_coverage.csv") %>%
select(1, 2, 3) %>%
mutate(year = as.integer(year))
View(health_service_coverage)
health_service_coverage <- read_csv("health_service_coverage.csv") %>%
select(1, 2, 3) %>%
mutate(year = as.integer(year)) %>%
filter(year > 2010) %>%
group_by(country) %>%
filter(year == max(year))
View(health_service_coverage)
health_service_coverage <- read_csv("health_service_coverage.csv")
View(health_service_coverage)
View(health_service_coverage)
health_service_coverage <- read_csv("health_service_coverage.csv") %>%
select(1, 2, 3)
names(health_service_coverage) <- c("country","year","fp_met")
View(health_service_coverage)
health_service_coverage <- health_service_coverage %>%
mutate(year = as.integer(year)) %>%
filter(year > 2010 & !is.na()) %>%
group_by(country) %>%
filter(year == max(year))
health_service_coverage <- health_service_coverage %>%
mutate(year = as.integer(year)) %>%
filter(year > 2010 & !is.na(fp_met)) %>%
group_by(country) %>%
filter(year == max(year))
View(health_service_coverage)
names(health_service_coverage) <- c("country","year","fp_met")
View(health_service_coverage)
secondary_infertility <- read_csv("secondary_infertility_by_country.csv")
sec_infert_health_service_cov <- left_join(secondary_infertility, health_service_coverage, by=c("country"))
sec_infert_health_service_cov <- left_join(subset(secondary_infertility, year == 2010), health_service_coverage, by=c("country"))
View(sec_infert_health_service_cov)
# import health service coverage file
health_service_coverage2 <- read_csv("health_service_coverage.csv") %>%
select(1, 2, 3)
names(health_service_coverage2) <- c("country","year","fp_met")
health_service_coverage2 <- health_service_coverage2 %>%
mutate(year = as.integer(year)) %>%
filter(year > 2010 & !is.na(fp_met)) %>%
mutate(diff = year - 2010)
group_by(country) %>%
filter(diff == min(diff)) %>%
ungroup()
health_service_coverage2 <- read_csv("health_service_coverage.csv") %>%
select(1, 2, 3)
names(health_service_coverage2) <- c("country","year","fp_met")
health_service_coverage2 <- health_service_coverage2 %>%
mutate(year = as.integer(year)) %>%
filter(year > 2010 & !is.na(fp_met)) %>%
mutate(diff = year - 2010)
group_by(country) %>%
filter(diff == min(diff)) %>%
ungroup()
View(health_service_coverage)
health_service_coverage2 <- read_csv("health_service_coverage.csv") %>%
select(1, 2, 3)
names(health_service_coverage2) <- c("country","year","fp_met")
View(health_service_coverage2)
health_service_coverage2 <- health_service_coverage2 %>%
mutate(year = as.integer(year)) %>%
filter(year > 2010 & !is.na(fp_met)) %>%
mutate(diff = year - 2010) %>%
group_by(country) %>%
filter(diff == min(diff)) %>%
ungroup()
View(health_service_coverage2)
