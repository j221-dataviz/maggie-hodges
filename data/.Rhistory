logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- as.logical(sample(c("TRUE", "FALSE", as.logical(0), as.logical(1)), 20, replace=TRUE))
logical <- as.logical(sample(c("TRUE", "FALSE",0,1), 20, replace=TRUE))
logical
class(logical)
#How do we turn these vectors into a data frame?
animals <- data.frame(uniform, normal, integer, character, logical)
animals
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
animals <- data.frame(uniform, normal, integer, character, logical, stringsAsFactors = FALSE)
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
#Day 2 Review
# How many different ways can you subset this data frame?
animals
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
#Day 2 Review
# How many different ways can you subset this data frame?
animals <- data.frame(uniform, normal, integer, character, logical, stringsAsFactors = FALSE)
animals
animals <- data.frame(uniform, normal, integer, character, logical, stringsAsFactors=FALSE)
animals
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
#Day 2 Review
# How many different ways can you subset this data frame?
normal= rnorm(20,0,1) #xbar=0, sd=1
integer=sample(5:10,20, replace=TRUE) #20 draws between 5 and 10 (ok to repeat and use numbers again)
?sample
character<- sample(c("Cat", "Dog", "Pig"), 20, replace=TRUE) # we can do the same thing with character data
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- as.logical(sample(c("TRUE", "FALSE", as.logical(0), as.logical(1)), 20, replace=TRUE))
logical <- as.logical(sample(c("TRUE", "FALSE",0,1), 20, replace=TRUE))
logical
class(logical)
#How do we turn these vectors into a data frame?
animals <- data.frame(uniform, normal, integer, character, logical, stringsAsFactors=FALSE)
animals
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
animals$Name
str(animals)
animals$Name <- factor(animals$Name)
str(animals)
animals
animals_sub <- animals
animals_sub <- animals[,c(1,5)]
str(animals_sub)
#What if I just wanted a subsetted data frame with "Name" and "Progress"?
animals_sub2 <- animals[,c(5:17, 20), c(1,5)]
animals_sub2 <- animals[c(5:17, 20), c(1,5)]
str(animals_sub2)
uniform <-runif(20,3,7)#sample 20 draws form the uniform distribution (graph: horizontal line)
?runif
#remember arguments belong in parentheseses
normal= rnorm(20,0,1) #xbar=0, sd=1
integer=sample(5:10,20, replace=TRUE) #20 draws between 5 and 10 (ok to repeat and use numbers again)
?sample
character<- sample(c("Cat", "Dog", "Pig"), 20, replace=TRUE) # we can do the same thing with character data
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- sample(c("TRUE", "FALSE"), 20, replace=TRUE)
logical <- as.logical(sample(c("TRUE", "FALSE", as.logical(0), as.logical(1)), 20, replace=TRUE))
logical <- as.logical(sample(c("TRUE", "FALSE"), 20, replace=TRUE))
logical
class(logical)
#How do we turn these vectors into a data frame?
animals <- data.frame(uniform, normal, integer, character, logical, stringsAsFactors=FALSE)
animals
# What if I just wanted a subsetted data frame with "Name" and "Progress"?
animals_sub <- animals[,c(1,5)]
str(animals_sub)
#What if I just wanted a subsetted data frame with "Name" and "Progress"?
animals_sub2 <- animals[c(5:17, 20), c(1,5)]
str(animals_sub2)
#These names are uninformative! Let's give them better ones:
names <- c("Weight", "Progress", "Height", "Name", "Healthy")
colnames(animals) <- names
head(animals)
#We can reorder the columns!
animals<- animals[,c("Name","Healthy","Weight","Height","Progress")]
animals<- animals[,c(3,5,4,1,2)]
head(animals)
names(animals)
colnames(animals)
animals$Name
#Day 2 Review
# How many different ways can you subset this data frame?
#1 "$" call a single column
animals$Name
#We actually want "Name" to be a factor so we can do comparisons
#To set the "Name" vector as a factor:
str(animals)
animals$Name <- factor(animals$Name)
str(animals)
animals
?summary
summary(animals)
require(pysch)
library(pysch)
install.packages("pysch")
library(pysch)
library(pysch)
install.packages("psych")
library(psych)
?describe
str(animals)
describe(animals[,c(3:5)])
describe(animals[,c(1:3)])
?describeBy
describeBy()
describeBy(animals[,c(1:3)]), animals$Name
describeBy(animals[,c(1:3)], animals$Name
describeBy(animals[,c(1:3)], animals$Name)
describeBy(animals[,c(1:3)], animals$Name)
table(animals$Name)
table(animals$Name)
table(animals$Name, animals$Healthy)
# use hist() to visualize a single variable
hist(animals$Weight, col="violetred")
?png
las=1) #make text parallel to x-axis
las=1) #make text parallel to x-axis
las=1) #make text parallel to x-axis
hist(animals$Weight, col="violetred",
main="Histogram of animal weights", # change title
xlab="Weight(kg)", #change x axis label
las=1) #make text parallel to x-axis
hist(animals$Weight, col="violetred",
main="Histogram of animal weights", # change title
xlab="Weight(kg)", #change x axis label
las=2) #make text parallel to x-axis
# save our histogram as a high-res, publishable quality figure
las=1) #make text parallel to x-axis
las=1) #make text parallel to x-axis
las=2) #make text parallel to x-axis
hist(animals$Weight, col="violetred",
main="Histogram of animal weights", # change title
xlab="Weight(kg)", #change x axis label
las=2) #make text parallel to x-axis
png("cool plot.png", height=6, width=6, units="in", res=300)
dev.off()
get(wd)
png("cool plot.png", height=6, width=6, units="in", res=300)
hist(animals$Weight, col="violetred",
main="Histogram of animal weights", # change title
xlab="Weight(kg)", #change x axis label
las=2) #make text parallel to x-axis
dev.off()
getwd()
data(iris)
?iris
str(iris)
data()
iris
head(iris)
table(species$Name)
table(Species$Name)
table(iris$Name, iris$Species)
table(iris$Species)
hist(iris$Sepal.Length, col=darkgreen",
hist(iris$Sepal.Length, col=darkgreen")
hist(iris$Sepal.Length)
hist(iris$Sepal.Length, col = "light green")
?plot
str(animals)
animals$Weight
animals$Height
plot(animals$Weight, animals$Height)
plot(animals$Weight, animals$Height,
xlab="Weight" (lbs)", # change x label
ylab="Height (meters)", # change y label
)
as.integer(animals$Name)
col=as.integer(animals$Name), #map point colors to cat, dog, pig
cex=4) #change point SIZE
ylim=c(4,11)) #chagne y axis limits
?pch
as.integer(animals$Name)
plot(animals$Weight, animals$Height,
xlab="Weight (lbs)", # change x label
ylab="Height (meters)", # change y label
main="Scatterplot of animal Weight x Height", # change title
las=1, #make axis text more horizontal
col=as.integer(animals$Name), #map point colors to cat, dog, pig
as.integer(animals$Name), #map point SHAPES to cat, dog, pig
cex=1, #change point SIZE
xlim=c(2,8), #change x axis limits
ylim=c(4,11))
plot(animals$Weight, animals$Height,
xlab="Weight (lbs)", # change x label
ylab="Height (meters)", # change y label
main="Scatterplot of animal Weight x Height", # change title
las=1, #make axis text more horizontal
col=as.integer(animals$Name), #map point colors to cat, dog, pig
as.integer(animals$Name), #map point SHAPES to cat, dog, pig
cex=1, #change point SIZE
xlim=c(2,8), #change x axis limits
ylim=c(4,11))
plot(animals$Weight, animals$Height,
xlab="Weight (lbs)", # change x label
ylab="Height (meters)", # change y label
main="Scatterplot of animal Weight x Height", # change title
las=1, #make axis text more horizontal
col=as.integer(animals$Name), #map point colors to cat, dog, pig
pch=as.integer(animals$Name), #map point SHAPES to cat, dog, pig
cex=1, #change point SIZE
xlim=c(2,8), #change x axis limits
ylim=c(4,11))
legend("topright")
horiz=FALSE)
devoff()
horiz=FALSE)
horiz=FALSE)
legend("topright", inset=.0, title="Animal", cex=1,
horiz=FALSE)
pch=as.integer(iris$Species))
iris$Species
col = c(1,2,3)
pch=c(1,2,3)
legend("topleft", inset=.1,
horiz=FALSE)
plot(iris$Petal.Length, iris$Petal.Width,
col=as.integer(iris$Species),
pch=as.integer(iris$Species))
iris$Species
legend("topleft", inset=.1,
c("setosa", "versicolor, virgnica"),
pch=c(1,2,3))
plot(animals$Weight, animals$Height,
xlab="Weight (lbs)", # change x label
ylab="Height (meters)", # change y label
main="Scatterplot of animal Weight x Height", # change title
las=1, #make axis text more horizontal
col=as.integer(animals$Name), #map point colors to cat, dog, pig
pch=as.integer(animals$Name), #map point SHAPES to cat, dog, pig
cex=1, #change point SIZE
xlim=c(2,8), #change x axis limits
ylim=c(4,11)) #chagne y axis limits
# add a legend:
legend("topright", inset=.0, title="Animal", cex=1,
c("Cat", "Dog", "Pig"), col=c(1,2,3), pch=c(1,2,3),
horiz=FALSE)
plot(iris$Petal.Length, iris$Petal.Width,
col=as.integer(iris$Species),
pch=as.integer(iris$Species))
iris$Species
legend("topleft", inset=.1,
c("setosa", "versicolor, virgnica"),
col=c(1,2,3)
pch=c(1,2,3))
legend("topleft", inset=.1,
c("setosa", "versicolor, virgnica"),
col=c(1,2,3)
pch=c(1,2,3))
pch=c(1,2,3))
boxplot(iris$Petal.Width ~ iris$Species, col=c("aquamarine", "goldenrod", "salmon"))
summary(iris)
plot(iris$Petal.Length, iris$Petal.Width,
col=as.integer(iris$Species),
pch=as.integer(iris$Species))
iris$Species
legend("topleft", inset=.1,
c("setosa", "versicolor, virgnica"),
col=c(1,2,3),
pch=c(1,2,3))
boxplot(iris$Petal.Width ~ iris$Species, col=c("aquamarine", "goldenrod", "salmon"))
main="Hooray!")
boxplot(iris$Petal.Width ~ iris$Species, col=c("aquamarine", "goldenrod", "salmon"),
main="Hooray!")
?t.test
t.test(iris$Petal.Length, iris$Petal.Width)
# To compare more than two group means, we use an ANOVA (analysis of variance)
?aov
flower.aov <- aov(Petal.Length ~ Species, data=iris)
flower.aov <- aov(Petal.Length ~ Species, data=iris)
flower.aov
?summary
summary(flower.aov)
?TukeyHSD
TukeyHSD(flower.aov)
?cor.test()
cor.test(animals$Height, animals$Weight)
print("Hello World!")
>print("Hello World!")
setwd("~/Google Drive/Grad School/3rd semester/Data Visualization/Final Project")
# load required packages
library(WDI)
library(dplyr)
library(readr)
library(stringr)
library(readxl)
infert <- read_csv("fertility.csv")
View(infert)
indic_list <- c("NY.GDP.PCAP.PP.CD", "SH.DYN.MORT", "SP.DYN.TFRT.IN")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2012, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, child_mortal=SH.DYN.MORT, fertil_rate=SP.DYN.TFRT.IN) %>%
filter(income != "Aggregates") %>%
mutate(year = as.integer(year))
fert <- read_csv("fertility.csv")
indic_list <- c("NY.GDP.PCAP.PP.CD", "SH.DYN.MORT", "SP.DYN.TFRT.IN")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2012, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, child_mortal=SH.DYN.MORT, fertil_rate=SP.DYN.TFRT.IN) %>%
filter(income != "Aggregates") %>%
mutate(year = as.integer(year))
install.packages('WDI')
library(WDI)
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2012, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, child_mortal=SH.DYN.MORT, fertil_rate=SP.DYN.TFRT.IN) %>%
filter(income != "Aggregates") %>%
mutate(year = as.integer(year))
View(indicators)
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
View(indicators)
infert <- read_excel("Infertility.xlsx", sheet=3, skip=3, col_names = FALSE)
names(infert) <- c("isoc3","country","year")
infert <- infert %>%
mutate(year = as.integer(year))
View(infert)
fert <- read_csv("fertility.csv")
indic_list <- c("NY.GDP.PCAP.PP.CD", "SH.DYN.MORT", "SP.DYN.TFRT.IN")
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2012, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, child_mortal=SH.DYN.MORT, fertil_rate=SP.DYN.TFRT.IN) %>%
filter(income != "Aggregates") %>%
mutate(year = as.integer(year))
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
infert <- read_excel("Infertility.xlsx", sheet=3, col_names = FALSE)
names(infert) <- c("isoc3","country","year", "primary infertility rate")
View(infert)
mutate(year = as.integer(year))
infert <- infert %>%
mutate(year = as.integer(year))
infert <- read_excel("Infertility.xlsx", skip = 1, sheet=3, col_names = FALSE)
names(infert) <- c("isoc3","country","year", "total population women 20-44","primary infertility rate")
View(infert)
infert <- infert %>%
mutate(year = as.integer(year))
# get data
fert <- read_csv("fertility.csv")
# create list of indicators to be imported
indic_list <- c("NY.GDP.PCAP.PP.CD", "SH.DYN.MORT", "SP.DYN.TFRT.IN")
# import indicators into single data frame and rename fields
indicators <- WDI(indicator=indic_list, country="all", start=1990, end=2012, extra=T, cache=NULL) %>%
rename(gdp_percap=NY.GDP.PCAP.PP.CD, child_mortal=SH.DYN.MORT, fertil_rate=SP.DYN.TFRT.IN) %>%
filter(income != "Aggregates") %>%
mutate(year = as.integer(year))
# data cleaning
indicators$region <- gsub("all income levels","", indicators$region)
indicators$region <- gsub("\\(|\\)","", indicators$region)
indicators$region <- str_trim(indicators$region)
indicators$income <- gsub(": nonOECD","", indicators$income)
indicators$income <- gsub(": OECD","", indicators$income)
infert <- read_excel("Infertility.xlsx", skip = 1, sheet=5, col_names = FALSE)
names(infert) <- c("isoc3","country","year", "total population women 20-44","primary infertility rate")
View(infert)
infert <- infert %>%
mutate(year = as.integer(year))
View(fert)
fertility <- left_join(fertility,infert, by = c(-"country"))
fertility <- left_join(fert,infert, by = c(-"country"))
fertility <- left_join(fert,infert, by = c("country"))
View(fertility)
fertility <- left_join(fert,infert, by = c("country", "isoc3"))
infert <- read_excel("Infertility.xlsx", skip = 1, sheet=5, col_names = FALSE)
names(infert) <- c("iso3c","country","year", "total population women 20-44","primary infertility rate")
infert <- infert %>%
mutate(year = as.integer(year))
fertility <- left_join(fert,infert, by = c("country", "iso3c"))
View(fertility)
fertility <- left_join(fert,infert, by = c("country"))
View(fertility)
fertility <- left_join(fert,infert, by = c("country", "year"))
View(fertility)
View(indicators)
relevant_years <- fert %>%
filter(year == "1990" & "2010") %>%
arrange(year)
relevant_years <- fert %>%
filter(year == "1990" | "2010") %>%
arrange(year)
relevant_years <- fert %>%
filter(year == "1990") %>%
arrange(year)
View(relevant_years)
relevant_years_fert <- fert %>%
filter(year == "1990" | year == "2010") %>%
arrange(year)
View(relevant_years_fert)
View(infert)
fertility_overall <- inner_join(relevant_years_fert, infert, by=c("country" = "country", "year" = "year")) %>%
select(fertil_rate, primary_infertility_rate, region, longitude, latitude, income)
infert <- read_excel("Infertility.xlsx", skip = 1, sheet=5, col_names = FALSE)
names(infert) <- c("iso3c","country","year", "total population women 20-44","primary_infertility_rate")
View(infert)
infert <- infert %>%
mutate(year = as.integer(year))
fertility_overall <- inner_join(relevant_years_fert, infert, by=c("country" = "country", "year" = "year")) %>%
select(fertil_rate, primary_infertility_rate, region, longitude, latitude, income)
relevant_years_fert <- fert %>%
filter(year == "1990" | year == "2010") %>%
arrange(year)
fertility_overall <- inner_join(relevant_years_fert, infert, by=c("country" = "country", "year" = "year")) %>%
select(fertil_rate, primary_infertility_rate, region, longitude, latitude, income)
View(fertility_overall)
fertility <- left_join(relevant_years_fert,infert, by = c("country", "year"))
View(fertility)
fertility <- fertility %>%
group_by(country) %>%
View(fertility)
fertility <- fertility %>%
group_by(country)
fertility <- left_join(relevant_years_fert,infert, by = c("country", "year"))
fertility <- fertility %>%
group_by(country)
View(fertility)
fertility <- fertility %>%
group_by(country, year)
View(fertility)
fertility <- fertility %>%
group_by(country, year) %>%
arrange(country, year)
View(fertility)
fertility <- fertility %>%
!is.na("fertil_rate" | "primary_infertility_rate")
fertility <- fertility %>%
!is.na("fertil_rate")
fertility <- fertility %>%
group_by(country, year) %>%
write_csv(indicators, "fertility_by_country.csv", na="")
View(indicators)
write_csv(relevant_years_fert, "fertility_by_country.csv", na="")
write_csv(fertility, "fertility_by_country.csv", na="")
infert <- read_excel("Infertility.xlsx", skip = 1, sheet=6, col_names = FALSE)
names(second_infert) <- c("iso3c","country","year", "total population women 20-44","secondary_infertility_rate")
infert <- read_excel("Infertility.xlsx", skip = 1, sheet=6, col_names = FALSE)
names(second_infert) <- c("iso3c","country","year", "total population women 20-44","secondary_infertility_rate")
infert <- read_excel("Infertility.xlsx", skip = 1, sheet=6, col_names = FALSE)
names(second_infert) <- c("iso3c","country","year", "total population women 20-44","secondary_infertility_rate")
second_infert <- read_excel("Infertility.xlsx", skip = 1, sheet=6, col_names = FALSE)
names(second_infert) <- c("iso3c","country","year", "total population women 20-44","secondary_infertility_rate")
View(second_infert)
second_infert <- second_infert %>%
mutate(year = as.integer(year))
secondary_infertility <- left_join(relevant_years_fert,second_infert, by = c("country", "year"))
secondary_infertility <- secondary_infertility %>%
group_by(country, year)
write_csv(secondary_infertility, "secondary_infertility_by_country.csv", na="")
View(secondary_infertility)
secondary_infertility <- secondary_infertility %>%
group_by(country, year)
arrange(country, year)
secondary_infertility <- secondary_infertility %>%
group_by(country, year) %>%
arrange(country, year)
View(secondary_infertility)
write_csv(secondary_infertility, "secondary_infertility_by_country.csv", na="")
save.image("~/Google Drive/Grad School/3rd semester/Data Visualization/Final Project/fertility_environment.RData")
library(WDI)
library(dplyr)
library(readr)
library(stringr)
library(readxl)
